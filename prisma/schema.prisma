// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  slug        String? @unique
  description String? @db.Text
  imageUrl    String? @db.Text
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  modules     Module[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([slug])
}

model Module {
  id          String  @id @default(uuid())
  title       String
  slug        String? @unique
  description String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  color       String?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons Lesson[]
  awards Award[]

  attachments ModuleAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([courseId, slug])
  @@index([courseId])
  @@index([slug])
  @@index([courseId, slug])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model CategoryLesson {
  id      String   @id @default(uuid())
  name    String   @unique
  lesson  Lesson[]
}

model AttachmemtType {
  id   String @id @default(uuid())
  name String
  attachments Attachment[]
}

model ModuleAttachmemtType {
  id          String       @id @default(uuid())
  name        String
  attachments ModuleAttachment[]
}

model ModuleAttachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  attachmentTypeId String?
  attachmentType ModuleAttachmemtType? @relation(fields: [attachmentTypeId], references: [id])

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([moduleId])
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  attachmentTypeId String?
  attachmentType AttachmemtType? @relation(fields: [attachmentTypeId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId])
}

model Lesson {
  id          String  @id @default(uuid())
  title       String
  slug        String? @unique
  description String? @db.Text
  videoId     String? @db.Text
  videoLibId  String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  prismaSlug  String?

  categoryId String?
  category   CategoryLesson? @relation(fields: [categoryId], references: [id])

  bunnyData BunnyData?

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  childProgress ChildProgress[]
  awards        Award[]

  questionaries Questionary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([slug, moduleId, isPublished])
  @@index([moduleId, slug])
  @@index([moduleId, slug, isPublished])
  @@index([slug])
}

model Questionary {
  id          String  @id @default(uuid())
  title       String
  position    Int
  isPublished Boolean @default(false)

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  questions Question[]

  points Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([lessonId])
}

model Question {
  id          String  @id @default(uuid())
  title       String
  position    Int
  isPublished Boolean @default(false)

  questionaryId String
  questionary   Questionary @relation(fields: [questionaryId], references: [id], onDelete: Cascade)

  correctAnswer Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([questionaryId])
}

model BunnyData {
  id         String  @id @default(uuid())
  videoId    String
  videoLibId String
  title  String?

  lessonId String @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([lessonId])
}

model ChildProgress {
  id     String @id @default(uuid())
  childId String

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)
  currentProgress Float @default(0)

  awards Award[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([childId, lessonId])
  @@index([lessonId])
}

model Award {
  id          String       @id @default(uuid())
  name        String
  description String?

  childProgressId String
  childProgress ChildProgress @relation(fields: [childProgressId], references: [id], onDelete: Cascade)

  module   Module? @relation(fields: [moduleId], references: [id])
  moduleId String?

  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId String?

  awardedAt   DateTime     @default(now())
}

model Purchase {
  id     String @id @default(uuid())
  childId String?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  stripeChargeId String?
  amount          Int

  type            String?

  billingAddress String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([accountId, courseId, childId])
  @@index([courseId, accountId, childId])
}

model Account {
  id               String  @id @default(uuid())
  userId           String  @unique

  stripeCustomerId String?  @unique

  children Child[]
  purchases Purchase[]

  firstName        String?
  lastName         String?
  email            String?  @unique
  status           String  @default("inactive")
  newsletter       Boolean @default(false)

  role             String  @default("member")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
}

model Child {
  id       String @id @default(uuid())

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  name String
  profilePicture String?
  birthday  DateTime

  parentConsent Boolean @default(false)
  notifications  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([accountId])
}
